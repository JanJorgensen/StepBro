{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "StepBro",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#procedures"
        },
        {
            "include": "#usings"
        },
        {
            "include": "#objects"
        },
        {
            "include": "#double-slash-comments"
        },
        {
            "include": "#multi-line-comments"
        },
        {
            "include": "#type-overrides"
        },
        {
            "include": "#test-list"
        }
    ],
    "repository": {
        "keywords": 
        {
            "patterns":
            [
                {
                    "name": "keyword.control.stepbro",
                    "match": "\\b(if|while|for|return|else)\\b"
                },
                {
                    "name": "keyword.other.types.stepbro",
                    "match": "\\b(bool|void|testlist|int|integer|decimal|verdict|datetime|timespan|string|type|namespace|var|double|object|filepath)\\b"
                },
                {
                    "name": "keyword.other.step.stepbro",
                    "match": "\\b(step)\\b"
                },
                {
                    "name": "keyword.other.using.stepbro",
                    "match": "\\b([public ]*using)\\b"
                },
                {
                    "name": "keyword.other.stepbro",
                    "match": "\\b(true|false|override|this|null|out)\\b"
                },
                {
                    "name": "keyword.other.partner.stepbro",
                    "match": "\\b(partner)\\b"
                },
                {
                    "name": "entity.other.attribute-name.await.stepbro",
                    "match": "\\b(await)\\b"
                },
                {
                    "name": "keyword.other.as.stepbro",
                    "match": "\\b(as)\\b"
                }
            ]
        },
        "constants":
        {
            "patterns":
            [
                {
                    "name": "constant.numeric.timespan.stepbro",
                    "match": "\\b([0-9]+[.]*[0-9]*(m|u|n|p)?s)|(@[0-9]+:[0-9]+((:|.)[0-9]+)?(.[0-9]+)?)\\b"
                },
                {
                    "name": "constant.numeric.stepbro",
                    "match": "\\b([0-9]+[.]*[0-9]*(P|T|G|M|K|m|u|n|p)?)\\b"
                }
            ]
        },
        "procedures":
        {
            "patterns":
            [
                {
                    "name": "entity.name.function.stepbro",
                    "match": "\\b(procedure|function)\\b"
                },
                {
                    "name": "keyword.other.protection.stepbro",
                    "match": "\\b(public|private)\\b"
                },
                {
                    "name": "entity.name.function.stepbro",
                    "match": "([a-zA-Z_][a-zA-Z0-9_]* *\\()"
                },
                {
                    "name": "entity.name.function.inherited.stepbro",
                    "match": "(?<=(procedure|function) .*:[ ]*)[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "entity.name.function.override.stepbro",
                    "match": "(?<=partner override )[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "entity.name.function.override.stepbro",
                    "match": "(?<=partner override .*:[ ]*)[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "entity.name.function.override.stepbro",
                    "match": "(?<=partner )[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "entity.name.function.override.stepbro",
                    "match": "(?<=partner .*:[ ]*)[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        },
        "strings": 
        {
            "name": "string.quoted.double.stepbro",
            "begin": "\"",
            "end": "\"",
            "patterns": 
            [
                {
                    "name": "constant.character.escape.stepbro",
                    "match": "\\\\."
                }
            ]
        },
        "usings":
        {
            "patterns":
            [
                {
                    "name": "constant.character.escape.using-at.stepbro",
                    "match": "(?<=using) @\".*\""
                },
                {
                    "name": "entity.name.function.using-normal.stepbro",
                    "match": "(?<=using) \\b(?!\\@\".*\").*\\b"
                }
            ]
        },
        "objects":
        {
            "patterns":
            [
                {
                    "name": "support.type.built-in.object-name.stepbro",
                    "match": "(?<=(public|private)) (?!(procedure|function))[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "support.type.argument.stepbro",
                    "match": "(?<=(\\([ ]*(this)*[ ]*))[a-zA-Z_][a-zA-Z0-9_]*[ ]+(?![^a-zA-Z_])"
                },
                {
                    "name": "support.type.argument.stepbro",
                    "match": "(?<=(\\(.*,[ ]*(this)*[ ]*))[a-zA-Z_][a-zA-Z0-9_]*[ ]+(?![^a-zA-Z_])"
                },
                {
                    "name": "support.type.definition.stepbro",
                    "match": "([a-zA-Z_][a-zA-Z0-9_]*)[ ]+(?=[a-zA-Z_][a-zA-Z0-9_]*[ ]*\\=)"
                }
            ]
        },
        "double-slash-comments":
        {
            "patterns":
            [
                {
                    "name": "comment.line.double-slash.stepbro",
                    "match": "\/\/.*"
                }
            ]
        },
        "multi-line-comments":
        {
            "name": "comment.block.stepbro",
            "begin": "\/\\*",
            "end": "\\*\/",
            "patterns":
            [
                {
                    "name": "comment.block.stepbro",
                    "match": "."
                }
            ]
        },
        "type-overrides":
        {
            "name": "override.type.stepbro",
            "patterns":
            [
                {
                    "name": "support.type.built-in.object-name.stepbro",
                    "match": "(?<=(type))[ ]+[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "support.type.built-in.object-name.stepbro",
                    "match": "(?<=(type [a-zA-Z_][a-zA-Z0-9_]*[ ]*:))[ ]*[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "support.type.override.built-in.object-name.stepbro",
                    "match": "(?<=(override [a-zA-Z_][a-zA-Z0-9_]*[ ]+as))[ ]+[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        },
        "test-list":
        {
            "patterns":
            [
                {
                    "name": "support.type.built-in.object-name.test-list.stepbro",
                    "match": "(?<=(testlist)) [a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "support.type.built-in.object-name.test-list.stepbro",
                    "match": "(?<=(testlist [a-zA-Z_][a-zA-Z0-9_]*[ ]*:[ ]*))[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "entity.name.function.test-list.case.stepbro",
                    "match": "(?<=\\*[ ]*)[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        }
    },
    "scopeName": "source.sbs"
}