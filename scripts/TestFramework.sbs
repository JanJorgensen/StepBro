// Basic test framework for test projects.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ████████ ███████ ███████ ████████     ███████ ██████   █████  ███    ███ ███████ ██     ██  ██████  ██████  ██   ██ //
//    ██    ██      ██         ██        ██      ██   ██ ██   ██ ████  ████ ██      ██     ██ ██    ██ ██   ██ ██  ██  //
//    ██    █████   ███████    ██        █████   ██████  ███████ ██ ████ ██ █████   ██  █  ██ ██    ██ ██████  █████   //
//    ██    ██           ██    ██        ██      ██   ██ ██   ██ ██  ██  ██ ██      ██ ███ ██ ██    ██ ██   ██ ██  ██  //
//    ██    ███████ ███████    ██        ██      ██   ██ ██   ██ ██      ██ ███████  ███ ███   ██████  ██   ██ ██   ██ //
//                                                                                                                     //
// https://patorjk.com/software/taag/#p=display&f=ANSI%20Regular&t=TEST%20FRAMEWORK                                    //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace TestFramework;

// Common procedure base for all test case (test procedure) procedures.
public procedure TestCase() :
    // Test procedures can have different parameters.
    FreeParameters,                                    
    // Setup procedure to be executed before the test case.    
    partner Setup:                      TestCaseEmptySetup,
    // cleanup procedure to be executed after the test case.
    partner Cleanup:                    TestCaseEmptyCleanup,
    // Setup and precondition check for the test case.
    // This will NOT be used when test case is executed from a test suite (test list).
    partner PreTest:                    TestCaseEmptyPreTest,
    // Model partner that keeps executing the test case until there is a fail or error.
    partner model TestUntilFail:        TestCaseTestUntilFail,
    // Model partner that first calls the Setup partner, then the test case and last the Cleanup partner.
    partner model TestFormal:           TestCaseFormalTest,
    // Model partner that keeps executing the test case until there is a fail or error.
    // For each loop the Setup partner, the test case and the Cleanup partner are all called.
    partner model TestFormalUntilFail:  TestCaseFormalTestUntilFail;

/// TestID          : The test case formal identification (if not present, the name of the element is used).
/// Summary         : The test case objective.
/// Author          : Name of the person that implemented the test.
/// Category        : Basic, Smoke Test, Normal or Extensive.
/// Automation      : No, Full or Semi.
/// References      : Links to documentation and other relevant resources.
/// Dependencies    : Test requirements or other test cases.
/// Preconditions   : Preconditions for the test to be fulfilled before the test can be successfully executed.
/// Remarks         : Details to add.
documentation TestDocumentationTemplate;

// Type definition for a test case Setup partner, and an empty implementation when no setup is needed.
public procedure void TestCaseEmptySetup( this TestCase testcase ){}

// Type definition for a test case Cleanup partner, and an empty implementation when no cleanup is needed.
public procedure void TestCaseEmptyCleanup( this TestCase testcase ){}

// Type definition for a test case PreTest partner, and an empty implementation when no pre test setup is needed.
procedure bool TestCaseEmptyPreTest( this TestCase testcase )
{ 
    return true; 
}

// Procedure to be used for the 'TestFormal' partner of a test case.
public procedure void TestCaseFormalTest( this TestCase testcase )
{
    bool preconditionsOkay = false;
    NextProcedureIsHighLevel("PreTest");
    preconditionsOkay = testcase.PreTest();
    if (preconditionsOkay)
    {
        NextProcedureIsHighLevel("Setup");
        testcase.Setup();
        NextProcedureIsHighLevel("Test");
        testcase();
        NextProcedureIsHighLevel("Cleanup");
        testcase.Cleanup();
    }
}

// Procedure to be used for the 'TestUntilFail' partner of a test case.
public procedure void TestCaseTestUntilFail( this TestCase testcase ) :
    NoSubResultInheritance  // The result of this procedure will not be directly affected by the results of sub procedures.
{
    int loopIndex = 1;
    var result = pass;
    bool preconditionsOkay = false;
    NextProcedureIsHighLevel("PreTest");
    preconditionsOkay = testcase.PreTest();
    if (preconditionsOkay)
    {
        while (result < fail) : Stoppable
        {
            NextProcedureIsHighLevel("Iteration #" + loopIndex);
            testcase();
            result = this.LastCallResult.Verdict;
            loopIndex++;
        }
    }
}

// Procedure to be used for the 'TestFormalUntilFail' partner of a test case.
public procedure void TestCaseFormalTestUntilFail( this TestCase testcase ) : 
    NoSubResultInheritance
{
    int loopIndex = 1;
    var result = pass;
    NextProcedureIsHighLevel("PreTest");
    testcase.PreTest();
    while (result < fail) : Stoppable
    {
        NextProcedureIsHighLevel("Setup #" + loopIndex);
        testcase.Setup();

        NextProcedureIsHighLevel("Test #" + loopIndex);
        testcase();
        result = this.LastCallResult.Verdict;

        NextProcedureIsHighLevel("Cleanup #" + loopIndex);
        testcase.Cleanup();

        loopIndex++;
    }
}

public testlist TestSuite :
    partner model   InfiniteTest : TestSuiteInfiniteTestExecution,  // Model partner for executing the TestSuite infinitely, or until the user stops the execution.
    partner model   FormalTest   : TestSuiteFormalTestExecution,    // Model partner for executing the TestSuite in a 'formal' way, with 'PreTest', test report and more.
    partner model   DirectTest   : TestSuiteDirectTestExecution,    // Model partner for executing the TestSuite simple and direct and without test report.
    partner         PreTest      : TestSuiteEmptyPreTest;           // Partner for setup and precondition check for the TestSuite.
// NOTE: Override the PreTest partner in your setup, to actually do some setup and to check any preconditions for the test.


// TestSuiteEmptyPreTest
// Default procedure for the 'PreTest' partner on TestSuite.
procedure bool TestSuiteEmptyPreTest(this TestSuite suite)
{
    // Do nothing. Just return "everything is fine".
    return true;
}

///
public procedure void TestSuiteInfiniteTestExecution(this TestSuite suite) :
    NoSubResultInheritance
{
    bool passedPreTest = true;
    NextProcedureIsHighLevel("PRETEST");
    passedPreTest = suite.PreTest();
    var iterator = suite.GetProcedureIterator();
    while (passedPreTest) : Stoppable
    {
        passedPreTest = suite.PreTest();
        iterator.Reset();
        while (iterator.GetNext()) : Stoppable
        {
            log ("Starting Test: " + iterator.Procedure.Name);
            TestCase testcase = iterator.Procedure as TestCase;
            NextProcedureIsHighLevel("TEST");
            iterator.Procedure( iterator.Arguments );
        }
    }
}

/// 
public procedure void TestSuiteDirectTestExecution(this TestSuite suite) :
    NoSubResultInheritance
{
    bool passedPreTest = true;
    NextProcedureIsHighLevel("PRETEST");
    passedPreTest = suite.PreTest();
    if (passedPreTest)
    {
        var summary = CreateTestSummary();
        var iterator = suite.GetProcedureIterator();
        while (iterator.GetNext()) : Stoppable
        {
            log ("Starting Test: " + iterator.Procedure.Name);
            TestCase testcase = iterator.Procedure as TestCase;
            NextProcedureIsHighLevel("TEST");
            iterator.Procedure( iterator.Arguments );
            summary.AddResult(testcase.Name, this.LastCallResult);
        }
        this.SetResult(summary.GetResultVerdict(), summary.GetResultDescription());
    }
    else
    {
        this.SetResult(error, "Failed the PreTest");
    }
}

/// 
public procedure void TestSuiteFormalTestExecution(this TestSuite suite) :
    NoSubResultInheritance
{
    bool passedPreTest = true;
    var testReport = StartReport("TestReport", suite.Name);
    var procedureSummary = suite.PreTest.ProcedureData.Summary;
    if (System.String.IsNullOrEmpty(procedureSummary))
    {
        procedureSummary = "";
    }
    else
    {
        procedureSummary = ".  " + procedureSummary;
    }
    testReport.StartGroup("Test Suite Test Setup", "The test configuration and preconditions. Setup procedure: " + suite.PreTest.FullName + "." + procedureSummary);
    NextProcedureIsHighLevel("PRETEST");
    passedPreTest = suite.PreTest();        // Keep this in separate line, to make sure this is a high-level procedure call.
    var result = this.LastCallResult;
    if (passedPreTest && result.Verdict <= pass)
    {
        var iterator = suite.GetProcedureIterator();

        // TODO: Save setup data in report
        // TODO: Save test suite data in report

        var summary = testReport.CreateTestSummary();

        while (iterator.GetNext()) : Stoppable
        {
            TestCase testcase = iterator.Procedure as TestCase;
            procedureSummary = testcase.ProcedureData.Summary;
            if (System.String.IsNullOrEmpty(procedureSummary))
            {
                procedureSummary = "";
            }
            var testCaseGroup = testReport.StartGroup(
                "Testcase " + iterator.Title, 
                procedureSummary, 
                testcase);
            summary.AddEntryBeforeResult(testCaseGroup);    // Register test case before execution; in case execution is terminated by an unhandled exeception.
            // TODO: Save test case data in report
            log ("Starting Test: " + iterator.Title);

            testReport.AddSection("Setup", "");
            NextProcedureIsHighLevel("SETUP");
            testcase.Setup();
            result = this.LastCallResult;

            if (result.Verdict < fail)  // Only run the test if the setup succeeded.
            {
                testReport.AddSection("Test", "");
                NextProcedureIsHighLevel("TEST");
                iterator.Procedure( iterator.Arguments );
                result = result.SelectIfWorse(this.LastCallResult);
            }

            testReport.AddSection("Cleanup", "");
            NextProcedureIsHighLevel("CLEANUP");
            testcase.Cleanup();
            result = result.SelectIfWorse(this.LastCallResult);

            summary.AddResult(testCaseGroup, result);
            testCaseGroup.Verdict = result.Verdict;
        }
        testReport.Close();     // Close the report, but don't remove it; the report might be printed or saved by the host application.
        //testReport.DumpToLog();
        // TODO: Save report in selected format in the selected location (file or URL). Selection taken from configuration file.

        this.SetResult(summary.GetResultVerdict(), summary.GetResultDescription());     // Keep this as the last statement; if there were any failed tests, the procedure will exit after this statement.
    }
    else
    {
        this.SetResult(result.Verdict <= pass ? fail : result.Verdict, "Pre-test failed. " + result.Description);
    }
}

// Some helpers for running actions from the command line.

public procedure void Action() :
    partner PreSetup: ActionEmptyPreSetup,
    partner model WithPreSetup : RunActionWithPreSetup,
    partner model Loop : RunActionInLoop,
    partner model LoopForever : RunActionInLoopForever,
    partner model LoopWithPreSetup : RunActionInLoopWithPreSetup;
    
public procedure bool ActionEmptyPreSetup() { return true; }

public procedure void RunActionWithPreSetup(this Action action)
{
    bool passedPreSetup = true;
    NextProcedureIsHighLevel("PreSetup");
    passedPreSetup = action.PreSetup();
    if (passedPreSetup)
    {
        NextProcedureIsHighLevel("Action");
        action();
    }
}

public procedure void RunActionInLoop(this Action action, timespan time = @1:00:00)
{
    int i = 0;
    while (true) : Timeout: time, Stoppable
    {
        i++;
        log ("Iteration #" + i);
        action();
    }
}

public procedure void RunActionInLoopForever(this Action action)
{
    int i = 0;
    while (true) : Stoppable
    {
        i++;
        log ("Iteration #" + i);
        action();
    }
}

public procedure void RunActionInLoopWithPreSetup(this Action action, timespan time = @1:00:00)
{
    bool passedPreSetup = true;
    NextProcedureIsHighLevel("PreSetup");
    passedPreSetup = action.PreSetup();
    if (passedPreSetup)
    {
        int i = 0;
        while (true) : Timeout: time, Stoppable
        {
            i++;
            log ("Iteration #" + i);
            NextProcedureIsHighLevel("Action");
            action();
        }
    }
}
