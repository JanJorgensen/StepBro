using StepBro.Process;
using StepBro.Core.Tasks;
using TestModule;

public using @"..\Scripts\TestFramework.sbs";


procedure void ScriptExecution(string file, string element, string model = "", int expectedReturn = 0) : TestCase
{
	log ("file: " + file);
	log ("element: " + element);
	var modelString = " -m " + model;
	if (!System.String.IsNullOrEmpty(model))
	{ 
		log ("model: " + model);
	}
	else
	{
		modelString = "";
	}
	log ("expectedReturn: " + expectedReturn);

    var process = Process.Start(@"stepbro.exe", "\"" + file + "\" -t -e " + element + modelString, logOutput: true, workingDirectory: this.FileDirectory);
	process.WaitForExit(expectReturnCodeZero: true);
	process.OutputLines.DebugDump();
}

public testlist ConsoleTests
{
	* ScriptExecution(file: @"..\Scripts\TestFramework.sbs", element: "Madsen", expectedReturn: -4)
	* ScriptExecution(file: @"..\Scripts\TestFramework.sbs", element: "Jensen")
}

public procedure void SayHello()
{
	log("Hello!!");
}

public procedure void ProcedureFail()
{
	expect (3 > 11);
}

public procedure void ExpectReporting()
{
	decimal length = 45.0;
	decimal MinLength = 30.0;
	decimal MaxLength = 60.0;
	expect "Length of cord": (length >~ MinLength);
}

public procedure int ThrowUnhandledException()
{
	log("Entered!");
	var testReport = StartReport("TestReport", "UnitTest");
	testReport.StartGroup("The Test", "");
	DoThrowUnhandledException();
	log("After the error.");
	testReport.Close();
	return 11;
}

procedure void DoThrowUnhandledException()
{
	TestClassWithOnlyStaticMethods.MethodThrowingException();
}

public procedure void LongDelay()
{
	delay(20s, "Waiting for my food...");
}

public procedure void LoopWithTimeout()
{
	while (true) : 
		Title: "Awaiting the thing to happen",
    	Timeout: 20s,
    	UserBreak: "I saw it!",
    	UserBreak: "Error"
	{
		delay(5s);
	}
}

public procedure void Caller()
{
	Called(5, "Moster");
}

public procedure void Called(int number, string text)
{
	log("Number: " + number + ". Text: " + text);
}

